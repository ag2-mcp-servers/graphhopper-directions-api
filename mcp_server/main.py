# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:16:18+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyQuery, BaseSecurity
from fastapi import Path, Query

from models import (
    Algorithm1,
    BadRequest,
    ClusterRequest,
    ClusterResponse,
    ClusterSolutionJobIdGetResponse,
    Curbside2,
    Curbside3,
    Details,
    FromCurbside,
    FromPoint,
    FromPointHint,
    GeocodingResponse,
    GHError,
    Heading,
    InfoResponse,
    InternalErrorMessage,
    IsochroneResponse,
    JobId,
    MatrixCalculatePostRequest,
    MatrixPostRequest,
    MatrixResponse,
    OutArray,
    Point,
    PointHint,
    Request,
    Response,
    RouteRequest,
    RouteResponse,
    SnapPrevention1,
    ToCurbside,
    ToPoint,
    ToPointHint,
    VehicleProfileId,
    VrpSolutionJobIdGetResponse,
    Weighting,
)

app = MCPProxy(
    contact={
        'email': 'support@graphhopper.com',
        'name': 'API Support',
        'url': 'https://www.graphhopper.com/',
    },
    description='\nWith the [GraphHopper Directions API](https://www.graphhopper.com/products/) you can integrate A-to-B route planning, turn-by-turn navigation,\nroute optimization, isochrone calculations and other tools in your application.\n\nThe GraphHopper Directions API consists of the following RESTful web services:\n\n * [Routing API](#tag/Routing-API),\n * [Route Optimization API](#tag/Route-Optimization-API),\n * [Isochrone API](#tag/Isochrone-API),\n * [Map Matching API](#tag/Map-Matching-API),\n * [Matrix API](#tag/Matrix-API),\n * [Geocoding API](#tag/Geocoding-API) and\n * [Cluster API](#tag/Cluster-API).\n\n# Explore our APIs\n\n## Get started\n\n1. [Sign up for GraphHopper](https://support.graphhopper.com/a/solutions/articles/44001976025)\n2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)\n\nEach API part has its own documentation. Jump to the desired API part and learn about the API through the given examples and tutorials.\n\nIn addition, for each API there are specific sample requests that you can send via Insomnia or Postman to see what the requests and responses look like.\n\n## Insomnia\n\nTo explore our APIs with [Insomnia](https://insomnia.rest/), follow these steps:\n\n1. Open Insomnia and Import [our workspace](https://raw.githubusercontent.com/graphhopper/directions-api-doc/master/web/restclients/GraphHopper-Direction-API-Insomnia.json).\n2. Specify [your API key](https://graphhopper.com/dashboard/#/register) in your workspace: Manage Environments -> Base Environment -> `"api_key": your API key`\n3. Start exploring\n\n![Insomnia](./img/insomnia.png)\n\n## Postman\n\nTo explore our APIs with [Postman](https://www.getpostman.com/), follow these steps:\n\n1. Import our [request collections](https://raw.githubusercontent.com/graphhopper/directions-api-doc/master/web/restclients/graphhopper_directions_api.postman_collection.json) as well as our [environment file](https://raw.githubusercontent.com/graphhopper/directions-api-doc/master/web/restclients/graphhopper_directions_api.postman_environment.json).\n2. Specify [your API key](https://graphhopper.com/dashboard/#/register) in your environment: `"api_key": your API key`\n3. Start exploring\n\n![Postman](./img/postman.png)\n\n## API Client Libraries\n\nTo speed up development and make coding easier, we offer the following client libraries:\n\n * [JavaScript client](https://github.com/graphhopper/directions-api-js-client) - try the [live examples](https://graphhopper.com/api/1/examples/)\n * [Others](https://github.com/graphhopper/directions-api-clients) like C#, Ruby, PHP, Python, ... automatically created for the Route Optimization API\n\n### Bandwidth reduction\n\nIf you create your own client, make sure it supports http/2 and gzipped responses for best speed.\n\nIf you use the Matrix, the Route Optimization API or the Cluster API and want to solve large problems, we recommend you to reduce bandwidth\nby [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4)\nand specifying the header as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error "Request Entity Too Large".\n\n## Contact Us\n\nIf you have problems or questions, please read the following information:\n\n- [FAQ](https://graphhopper.com/api/1/docs/FAQ/)\n- [Public forum](https://discuss.graphhopper.com/c/directions-api)\n- [Contact us](https://www.graphhopper.com/contact-form/)\n- [GraphHopper Status Page](https://status.graphhopper.com/)\n\nTo stay informed about the latest developments, you can\n\n- follow us on [twitter](https://twitter.com/graphhopper/),\n- read [our blog](https://graphhopper.com/blog/),\n- watch [our documentation repository](https://github.com/graphhopper/directions-api-doc),\n- sign up for our newsletter or\n- [our forum](https://discuss.graphhopper.com/c/directions-api).\n\nSelect the channel you like the most.\n\n\n# Map Data and Routing Profiles\n\nCurrently, our main data source is [OpenStreetMap](https://www.openstreetmap.org). We also integrated other network data providers.\nThis chapter gives an overview about the options you have.\n\n## OpenStreetMap\n\n#### Geographical Coverage\n\n[OpenStreetMap](https://www.openstreetmap.org) covers the whole world. If you want to see for yourself if we can provide data suitable for your region,\nplease visit [GraphHopper Maps](https://graphhopper.com/maps/).\nYou can edit and modify OpenStreetMap data if you find that important information is missing, e.g. a weight limit for a bridge.\n[Here](https://wiki.openstreetmap.org/wiki/Beginners%27_guide) is a beginner\'s guide that shows how to add data. If you have edited data, we usually consider your data after 1 week at the latest.\n\n#### Supported Vehicle Profiles\n\nThe Routing, Matrix and Route Optimization APIs support the following vehicle profiles:\n\nName       | Description           | Restrictions              | Icon\n-----------|:----------------------|:--------------------------|:---------------------------------------------------------\ncar        | Car mode              | car access                | ![car image](https://graphhopper.com/maps/img/car.png)\nsmall_truck| Small truck like a Mercedes Sprinter, Ford Transit or Iveco Daily | height=2.7m, width=2+0.4m, length=5.5m, weight=2080+1400 kg | ![small truck image](https://graphhopper.com/maps/img/small_truck.png)\ntruck      | Truck like a MAN or Mercedes-Benz Actros | height=3.7m, width=2.6+0.5m, length=12m, weight=13000 + 13000 kg, hgv=yes, 3 Axes | ![truck image](https://graphhopper.com/maps/img/truck.png)\nscooter    | Moped mode | Fast inner city, often used for food delivery, is able to ignore certain bollards, maximum speed of roughly 50km/h | ![scooter image](https://graphhopper.com/maps/img/scooter.png)\nfoot       | Pedestrian or walking without dangerous [SAC-scales](https://wiki.openstreetmap.org/wiki/Key:sac_scale) | foot access         | ![foot image](https://graphhopper.com/maps/img/foot.png)\nhike       | Pedestrian or walking with priority for more beautiful hiking tours and potentially a bit longer than `foot`. Walking duration is influenced by elevation differences.  | foot access         | ![hike image](https://graphhopper.com/maps/img/hike.png)\nbike       | Trekking bike avoiding hills | bike access  | ![bike image](https://graphhopper.com/maps/img/bike.png)\nmtb        | Mountainbike          | bike access         | ![Mountainbike image](https://graphhopper.com/maps/img/mtb.png)\nracingbike| Bike preferring roads | bike access         | ![racingbike image](https://graphhopper.com/maps/img/racingbike.png)\n\nPlease note:\n\n * all motor vehicles (`car`, `small_truck`, `truck` and `scooter`) support turn restrictions via `turn_costs=true`\n * the free package supports only the vehicle profiles `car`, `bike` or `foot`\n * up to 2 different vehicle profiles can be used in a single optimization request. The number of vehicles is unaffected and depends on your subscription.\n * we offer custom vehicle profiles with different properties, different speed profiles or different access options. To find out more about custom profiles, please [contact us](https://www.graphhopper.com/contact-form/).\n * a sophisticated `motorcycle` profile is available up on request. It is powered by the [Kurviger](https://kurviger.de/en) Routing API and favors curves and slopes while avoiding cities and highways.\n \n## TomTom\n\nIf you want to include traffic, you can purchase the TomTom Add-on.\nThis Add-on only uses TomTom\'s road network and historical traffic information.\nLive traffic is not yet considered. If you are interested to learn how we consider traffic information, we recommend that you read [this article](https://www.graphhopper.com/blog/2017/11/06/time-dependent-optimization/).\n\nPlease note the following:\n\n * Currently we only offer this for our [Route Optimization API](#tag/Route-Optimization-API).\n * In addition to our terms, you need to accept TomTom\'s [End User License Aggreement](https://www.graphhopper.com/tomtom-end-user-license-agreement/).\n * We do *not* use TomTom\'s web services. We only use their data with our software.\n \n[Contact us](https://www.graphhopper.com/contact-form/) for more details.\n\n#### Geographical Coverage\n\nWe offer\n\n- Europe including Russia\n- North, Central and South America\n- Saudi Arabia\n- United Arab Emirates\n- South Africa\n- Australia\n\n#### Supported Vehicle Profiles\n\nName       | Description           | Restrictions              | Icon\n-----------|:----------------------|:--------------------------|:---------------------------------------------------------\ncar        | Car mode              | car access                | ![car image](https://graphhopper.com/maps/img/car.png)\nsmall_truck| Small truck like a Mercedes Sprinter, Ford Transit or Iveco Daily | height=2.7m, width=2+0.4m, length=5.5m, weight=2080+1400 kg | ![small truck image](https://graphhopper.com/maps/img/small_truck.png)\n',
    termsOfService='https://www.graphhopper.com/terms/',
    title='GraphHopper Directions API',
    version='1.0.0',
    servers=[{'url': 'https://graphhopper.com/api/1'}],
)


@app.post(
    '/cluster',
    description=""" 
The Cluster endpoint is used with a POST request towards
`https://graphhopper.com/api/1/cluster?key=<your_key>`. The solution will be provided in the JSON response.
Please note that for problems that take longer than 10 seconds a bad request error is returned.
In this case please use the asynchronous [Batch Cluster Endpoint](#operation/asyncClusteringProblem) instead.
 """,
    tags=['clustering_operations'],
    security=[
        APIKeyQuery(name="key"),
    ],
)
def solve_clustering_problem(body: ClusterRequest):
    """
    POST Cluster Endpoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/cluster/calculate',
    description=""" 
Prefer the [synchronous endpoint](#operation/solveClusteringProblem) and use this Batch Cluster endpoint for
long running problems only. The work flow is asynchronous:

- send a POST request towards `https://graphhopper.com/api/1/cluster/calculate?key=<your_key>` and fetch the job_id.
- poll the solution every 500ms until it gives `status=finished`. Do this with a GET request
  towards `https://graphhopper.com/api/1/cluster/solution/<job_id>?key=<your_key>`.
 """,
    tags=['clustering_operations', 'vehicle_routing_optimizations'],
    security=[
        APIKeyQuery(name="key"),
    ],
)
def async_clustering_problem(body: ClusterRequest):
    """
    Batch Cluster Endpoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cluster/solution/{jobId}',
    description=""" This endpoint returns the solution of the clustering problems submitted to the [Batch Cluster endpoint](#operation/asyncClusteringProblem).
You can fetch it with the job_id, you have been sent.
 """,
    tags=['clustering_operations', 'vehicle_routing_optimizations'],
    security=[
        APIKeyQuery(name="key"),
    ],
)
def get_cluster_solution(job_id: str = Path(..., alias='jobId')):
    """
    GET Batch Solution Endpoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/geocode',
    description=""" 
### Introduction

![Geocoding Example](./img/geocoding-example.png)

_Geocoding_ describes the process of transforming an textual address representation to a coordinate (`latitude,longitude`).
For example the conversion from `Berlin` to `52.5170365,13.3888599`.

_Reverse geocoding_ converts a coordinate to a textual address representation or place name. Find out more about Geocoding itself on [Wikipedia](http://en.wikipedia.org/wiki/Geocoding).
 """,
    tags=['geocoding_services'],
    security=[
        APIKeyQuery(name="key"),
    ],
)
def get_geocode(
    q: Optional[str] = None,
    locale: Optional[str] = 'en',
    limit: Optional[int] = 10,
    reverse: Optional[bool] = False,
    debug: Optional[bool] = False,
    point: Optional[str] = None,
    provider: Optional[str] = 'default',
):
    """
    Geocoding Endpoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/isochrone',
    description=""" ### Example
You can get an example response via:

```
curl "https://graphhopper.com/api/1/isochrone?point=51.131108,12.414551&key=[YOUR_KEY]"
```

Don't forget to replace the placeholder with your own key.

### Introduction
![Isochrone screenshot](./img/isochrone-example.png)

An isochrone of a location is ''a line connecting points at which a vehicle arrives at the same time'', see Wikipedia.
With the same API you can also calculate isodistances, just use the parameter distance_limit instead of time_limit`.

### Use Cases
Some possible areas in which this API may be useful to you:

- real estate analysis
- realtors
- vehicle scheduling
- geomarketing
- reach of electric vehicles
- transport planning
- logistics (distribution and retail network planning)

### API Clients and Examples
See the [clients](#section/API-Clients) section in the main documentation, and [live examples](https://graphhopper.com/api/1/examples/#isochrone).
 """,
    tags=['isochrone_data_services', 'route_planning'],
    security=[
        APIKeyQuery(name="key"),
    ],
)
def get_isochrone(
    point: str,
    time_limit: Optional[int] = 600,
    distance_limit: Optional[int] = None,
    vehicle: Optional[VehicleProfileId] = None,
    buckets: Optional[int] = 1,
    reverse_flow: Optional[bool] = False,
    weighting: Optional[Weighting] = 'fastest',
):
    """
    Isochrone Endpoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/match',
    description=""" ### Example
You get an example response for a GPX via:

```
curl -XPOST -H "Content-Type: application/gpx+xml" "https://graphhopper.com/api/1/match?vehicle=car&key=[YOUR_KEY]" --data @/path/to/some.gpx
```

A minimal working GPX file looks like
```gpx
<gpx>
 <trk>
  <trkseg>
   <trkpt lat="51.343657" lon="12.360708"></trkpt>
   <trkpt lat="51.343796" lon="12.361337"></trkpt>
   <trkpt lat="51.342784" lon="12.361882"></trkpt>
  </trkseg>
 </trk>
</gpx>
```

### Introduction
![Map Matching screenshot](./img/map-matching-example.gif)

The Map Matching API is part of the GraphHopper Directions API and with this API you can snap measured GPS points typically as GPX files to a digital
road network to e.g. clean data or attach certain data like elevation or turn instructions to it. Read more at Wikipedia.

In the example screenshot above and demo you see the Map Matching API in action where the black line is the GPS track and the green one is matched result.

Most of the times, you can simply POST a GPX file, but some of the request parameters of the [Routing API](#tag/Routing-API) apply here, too.

### API Clients and Examples
See the [clients](#section/API-Clients) section in the main documentation, and [live examples](https://graphhopper.com/api/1/examples/#map-matching).

### Limits and Counts
The cost for one request depends on the number of GPS location and is documented [here](https://graphhopper.com/api/1/docs/FAQ/).

One request should not exceed the Map Matching API location limit depending on the package, see the pricing in our dashboard.
 """,
    tags=['route_planning', 'geocoding_services'],
    security=[
        APIKeyQuery(name="key"),
    ],
)
def post_g_p_x(gps_accuracy: Optional[int] = None, vehicle: Optional[str] = None):
    """
    Map-match a GPX file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/matrix',
    description=""" With this Matrix Endpoint you submit the points and parameters via URL parameters and is the most convenient
as it works out-of-the-box in the browser. If possible you should
prefer using the [POST Matrix Endpoint](#operation/postMatrix) that avoids problems with many locations
and can also gzip the **request**. (Note, that all endpoints return gzipped responses).
 """,
    tags=['matrix_operations', 'route_planning', 'vehicle_routing_optimizations'],
    security=[
        APIKeyQuery(name="key"),
    ],
)
def get_matrix(
    point: Optional[Point] = None,
    from_point: Optional[FromPoint] = None,
    to_point: Optional[ToPoint] = None,
    point_hint: Optional[PointHint] = None,
    from_point_hint: Optional[FromPointHint] = None,
    to_point_hint: Optional[ToPointHint] = None,
    snap_prevention: Optional[SnapPrevention1] = None,
    curbside: Optional[Curbside2] = None,
    from_curbside: Optional[FromCurbside] = None,
    to_curbside: Optional[ToCurbside] = None,
    out_array: Optional[OutArray] = None,
    vehicle: Optional[VehicleProfileId] = None,
    fail_fast: Optional[bool] = True,
    turn_costs: Optional[bool] = False,
):
    """
    GET Matrix Endpoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/matrix',
    description=""" 
The [GET endpoint](#operation/getMatrix) has an URL length limitation, which hurts for many locations per request.
In those cases use this POST endpoint with a JSON as input. The only parameter in the URL will be the key.
Both request scenarios are identical except that all singular parameter names are named as their plural for a POST request.
The effected parameters are: `points`, `from_points`, `to_points`, and `out_arrays`. For the remaining parameters
please refer to the [guide of the GET endpoint](#operation/getMatrix).

**Please note that in contrast to GET endpoint the points have to be specified as `[longitude, latitude]` array (in that order, similar to [GeoJson](http://geojson.org/geojson-spec.html#examples))**.

For example the query `point=10,11&point=20,22&vehicle=car` will be converted to the following JSON:
```json
{ "points": [[11,10], [22,20]], "vehicle": "car" }
```

A complete curl Example:
```bash
curl -X POST -H "Content-Type: application/json" "https://graphhopper.com/api/1/matrix?key=[YOUR_KEY]" -d '{"elevation":false,"out_arrays":["weights", "times"],"from_points":[[-0.087891,51.534377],[-0.090637,51.467697],[-0.171833,51.521241],[-0.211487,51.473685]],"to_points":[[-0.087891,51.534377],[-0.090637,51.467697],[-0.171833,51.521241],[-0.211487,51.473685]],"vehicle":"car"}'
```
 """,
    tags=['matrix_operations', 'route_planning'],
    security=[
        APIKeyQuery(name="key"),
    ],
)
def post_matrix(body: MatrixPostRequest = None):
    """
    POST Matrix Endpoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/matrix/calculate',
    description=""" Prefer the [synchronous endpoint](#operation/postMatrix) and use this Batch endpoint for long running problems only.

The Batch Matrix endpoint allows using matrices with more locations and works asynchronously - similar to the [Batch Route Optimization endpoint](#operation/asyncVRP):
 * Create a HTTP POST request against `/matrix/calculate` and add the key in the URL: `/matrix/calculate?key=[YOUR_KEY]`. This will give you the `job_id` from the response json like `{ "job_id": "7ac65787-fb99-4e02-a832-2c3010c70097" }`
 * Poll via HTTP GET requests every 500ms against `/matrix/solution/[job_id]`

Here are some full examples via curl:
```bash
$ curl -X POST -H "Content-Type: application/json" "https://graphhopper.com/api/1/matrix/calculate?key=[YOUR_KEY]" -d '{"points":[[13.29895,52.48696],[13.370876,52.489575],[13.439026,52.511206]]}'
{"job_id":"7ac65787-fb99-4e02-a832-2c3010c70097"}
```

Pick the returned `job_id` and use it in the next GET requests:
```bash
$ curl -X GET "https://graphhopper.com/api/1/matrix/solution/7ac65787-fb99-4e02-a832-2c3010c70097?key=[YOUR_KEY]"
{"status":"waiting"}
```

When the calculation is finished (`status:finished`) the JSON response will contain the full matrix JSON under `solution`:
```bash
$ curl -X GET "https://graphhopper.com/api/1/matrix/solution/7ac65787-fb99-4e02-a832-2c3010c70097?key=[YOUR_KEY]"
{"solution":{"weights":[[0.0,470.453,945.414],[503.793,0.0,580.871],[970.49,569.511,0.0]],"info":{"copyrights":["GraphHopper","OpenStreetMap contributors"]}},"status":"finished"}
```

Please note that if an error occured while calculation the JSON will not have a status but contain directly the error message e.g.:
```json
{"message":"Cannot find from_points: 1"}
```
And the optional `hints` array.
 """,
    tags=['matrix_operations', 'vehicle_routing_optimizations'],
    security=[
        APIKeyQuery(name="key"),
    ],
)
def calculate_matrix(body: MatrixCalculatePostRequest = None):
    """
    Batch Matrix Endpoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/matrix/solution/{jobId}',
    description=""" This endpoint returns the solution of a JSON submitted to the Batch Matrix endpoint. You can fetch it with the job_id, you have been sent.
 """,
    tags=['matrix_operations', 'vehicle_routing_optimizations'],
    security=[
        APIKeyQuery(name="key"),
    ],
)
def get_matrix_solution(job_id: str = Path(..., alias='jobId')):
    """
    GET Batch Matrix Endpoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/route',
    description=""" The GET request is the most simple one: just specify the parameter in the URL and you are done.
Can be tried directly in every browser.
 """,
    tags=['route_planning', 'vehicle_routing_optimizations'],
    security=[
        APIKeyQuery(name="key"),
    ],
)
def get_route(
    point: Point,
    point_hint: Optional[PointHint] = None,
    snap_prevention: Optional[SnapPrevention1] = None,
    vehicle: Optional[VehicleProfileId] = None,
    curbside: Optional[Curbside3] = None,
    turn_costs: Optional[bool] = False,
    locale: Optional[str] = 'en',
    elevation: Optional[bool] = False,
    details: Optional[Details] = None,
    optimize: Optional[str] = 'false',
    instructions: Optional[bool] = True,
    calc_points: Optional[bool] = True,
    debug: Optional[bool] = False,
    points_encoded: Optional[bool] = True,
    ch_disable: Optional[bool] = Query(False, alias='ch.disable'),
    weighting: Optional[str] = 'fastest',
    heading: Optional[Heading] = None,
    heading_penalty: Optional[int] = 120,
    pass_through: Optional[bool] = False,
    block_area: Optional[str] = None,
    avoid: Optional[str] = None,
    algorithm: Optional[Algorithm1] = None,
    round_trip_distance: Optional[int] = Query(10000, alias='round_trip.distance'),
    round_trip_seed: Optional[int] = Query(None, alias='round_trip.seed'),
    alternative_route_max_paths: Optional[int] = Query(
        2, alias='alternative_route.max_paths'
    ),
    alternative_route_max_weight_factor: Optional[float] = Query(
        1.4, alias='alternative_route.max_weight_factor'
    ),
    alternative_route_max_share_factor: Optional[float] = Query(
        0.6, alias='alternative_route.max_share_factor'
    ),
):
    """
    GET Route Endpoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/route',
    description=""" Please see the [GET endpoint](#operation/getRoute) for a simpler method on how to get started.
If you are familiar with POST requests and JSON then do not hesitate to continue here.

Especially when you use many locations you should get familiar with this POST endpoint as the GET endpoint
has an URL length limitation. Additionally the request of this POST endpoint can be compressed and can slightly
speed up the request.

To do a request you send JSON data. Both request scenarios GET and POST are identical except that all singular parameter names are named as their plural for a POST request.
The effected parameters are: `points`, `point_hints` and `snap_preventions`.

**Please note that in opposite to the GET endpoint, points are specified in the order of `longitude, latitude`**.

For example `point=10,11&point=20,22` will be converted to the `points` array (plural):
```json
{ "points": [[11,10], [22,20]] }
```
Note again that also the order changes from `[latitude,longitude]` to `[longitude,latitude]`
similar to [GeoJson](http://geojson.org/geojson-spec.html#examples).

Example:
```bash
curl -X POST -H "Content-Type: application/json" "https://graphhopper.com/api/1/route?key=[YOUR_KEY]" -d '{"elevation":false,"points":[[-0.087891,51.534377],[-0.090637,51.467697]],"vehicle":"car"}'
```
 """,
    tags=['route_planning'],
    security=[
        APIKeyQuery(name="key"),
    ],
)
def post_route(body: RouteRequest = None):
    """
    POST Route Endpoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/route/info',
    description=""" Use this to find out details about the supported vehicle profiles and features, or if you just need to ping the server.
 """,
    tags=['matrix_operations'],
    security=[
        APIKeyQuery(name="key"),
    ],
)
def get_route_info():
    """
    Coverage information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/vrp',
    description=""" 
To get started with the Route Optimization API, please read the [introduction](#tag/Route-Optimization-API).

To solve a new vehicle routing problem, make a HTTP POST to this URL

```
https://graphhopper.com/api/1/vrp?key=<your_key>
```

It returns the solution to this problem in the JSON response.

Please note that this URL is very well suited to solve minor problems.
Larger vehicle routing problems, which take longer than 10 seconds to solve, cannot be solved.
To solve them, please use the [batch mode URL](#operation/asyncVRP) instead.
 """,
    tags=['route_planning', 'vehicle_routing_optimizations'],
    security=[
        APIKeyQuery(name="key"),
    ],
)
def solve_v_r_p(body: Request):
    """
    POST route optimization problem
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/vrp/optimize',
    description=""" 
To solve a vehicle routing problem, perform the following steps:

1.) Make a HTTP POST to this URL

```
https://graphhopper.com/api/1/vrp/optimize?key=<your_key>
```

It returns a job id (job_id).

2.) Take the job id and fetch the solution for the vehicle routing problem from this URL:

```
https://graphhopper.com/api/1/vrp/solution/<job_id>?key=<your_key>
```

We recommend to query the solution every 500ms until it returns 'status=finished'.

**Note**: Since the workflow is a bit more cumbersome and since you lose some time in fetching the solution, you should always prefer
the [synchronous endpoint](#operation/solveVRP). You should use the batch mode only for long running problems.
 """,
    tags=['vehicle_routing_optimizations', 'route_planning'],
    security=[
        APIKeyQuery(name="key"),
    ],
)
def async_v_r_p(body: Request):
    """
    POST route optimization problem (batch mode)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vrp/solution/{jobId}',
    description=""" 
Take the job id and fetch the solution for the vehicle routing problem from this URL:

```
https://graphhopper.com/api/1/vrp/solution/<job_id>?key=<your_key>
```

You get the job id by sending a vehicle routing problem to the [batch mode URL](#operation/asyncVRP).
 """,
    tags=['clustering_operations', 'vehicle_routing_optimizations'],
    security=[
        APIKeyQuery(name="key"),
    ],
)
def get_solution(job_id: str = Path(..., alias='jobId')):
    """
    GET the solution (batch mode)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
