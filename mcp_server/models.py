# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:16:18+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import BaseModel, Field, RootModel, conint


class Type(Enum):
    start = 'start'
    end = 'end'
    service = 'service'
    pickupShipment = 'pickupShipment'
    deliverShipment = 'deliverShipment'
    pickup = 'pickup'
    delivery = 'delivery'
    break_ = 'break'


class Curbside(Enum):
    right = 'right'
    left = 'left'
    any = 'any'


class Address(BaseModel):
    curbside: Optional[Curbside] = Field(
        'any',
        description='Optional parameter. Specifies on which side a point should be relative to the driver when she leaves/arrives at a start/target/via point. Only supported for motor vehicles and OpenStreetMap.',
        examples=[
            'If you would like to arrive at this address without having to cross the street use `curbside=right/left` for countries with right/left-hand driving. Using `curbside=any` is the same as not specifying this parameter at all.'
        ],
    )
    lat: float = Field(..., description='Latitude of location.', examples=[51.512665])
    location_id: str = Field(
        ...,
        description='Specifies the id of the location.',
        examples=['550e8400-e29b-11d4-a716-446655440000'],
    )
    lon: float = Field(..., description='Longitude of location.', examples=[-0.092869])
    name: Optional[str] = Field(
        None,
        description='Name of location.',
        examples=['Queens Victoria Street 70, Second Floor, Flat 245'],
    )
    street_hint: Optional[str] = Field(
        None,
        description='Optional parameter. Specifies a hint for each address to better snap the coordinates (lon,lat) to road network. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.',
        examples=['Queens Victoria Street 70'],
    )


class Objective(Enum):
    transport_time = 'transport_time'
    completion_time = 'completion_time'


class ProblemType(Enum):
    min = 'min'
    min_max = 'min-max'


class Algorithm(BaseModel):
    objective: Optional[Objective] = None
    problem_type: Optional[ProblemType] = None


class Cluster(BaseModel):
    ids: Optional[List[str]] = Field(
        None,
        description='Array of customer ids assigned to this specific cluster',
        examples=[['GraphHopper GmbH']],
    )
    quantity: Optional[float] = Field(None, description='Cluster size', examples=[40])


class ClusterConfigurationClustering(BaseModel):
    max_quantity: Optional[float] = Field(
        None, description='Specifies max. quantity in a cluster', examples=[50]
    )
    min_quantity: Optional[float] = Field(
        None, description='Specifies min. quantity in a cluster', examples=[30]
    )
    num_clusters: Optional[float] = Field(
        None, description='Specifies the number of clusters', examples=[10]
    )


class ClusterConfigurationRouting(BaseModel):
    cost_per_meter: Optional[float] = Field(
        None, description='Cost per meter (travel distance)', examples=[0]
    )
    cost_per_second: Optional[float] = Field(
        None, description='Cost per second (travel time)', examples=[1]
    )
    profile: Optional[str] = Field(
        None,
        description='The routing profile for which the travel times and distances should be calculated. Other profiles are listed [here](#section/Map-Data-and-Routing-Profiles/OpenStreetMap)',
        examples=['car'],
    )


class ClusterCustomerAddress(BaseModel):
    lat: Optional[float] = Field(None, description='Latitude', examples=[48.118434])
    lon: Optional[float] = Field(None, description='Longitude', examples=[11.53941])
    street_hint: Optional[str] = Field(
        None,
        description='Optional parameter. Specifies a hint for each address to better snap the coordinates (lon,lat) to road network. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.',
        examples=['Lindenschmitstra√üe 52'],
    )


class Status(Enum):
    waiting_in_queue = 'waiting_in_queue'
    processing = 'processing'
    finished = 'finished'


class ClusterResponse(BaseModel):
    clusters: Optional[List[Cluster]] = None
    copyrights: Optional[List[str]] = Field(
        None, examples=[['GraphHopper', 'OpenStreetMap contributors']]
    )
    processing_time: Optional[float] = Field(None, examples=[4900])
    status: Optional[Status] = Field(
        None,
        description='Indicates the current status of the job',
        examples=['finished'],
    )
    waiting_time_in_queue: Optional[float] = None


class Info(BaseModel):
    copyrights: Optional[List[str]] = None
    took: Optional[float] = None


class Data(BaseModel):
    distances: Optional[List[List[float]]] = Field(None, min_length=1)
    info: Optional[Info] = Field(
        None, description='Additional information for your request'
    )
    times: Optional[List[List[int]]] = Field(None, min_length=1)


class Type1(Enum):
    default = 'default'
    google = 'google'


class CostMatrix(BaseModel):
    data: Optional[Data] = Field(None, description='JSON data of matrix response')
    location_ids: Optional[List[str]] = None
    profile: Optional[str] = Field(
        None, description='vehicle profile or empty if catch all fallback'
    )
    type: Optional[Type1] = Field(
        None,
        description='type of cost matrix, currently default or google are supported',
    )


class Detail(BaseModel):
    code: Optional[int] = Field(
        None,
        description='Reason code\n\nCode   |  Reason\n:------|:---------\n1 | cannot serve required skill\n2 | cannot be visited within time window\n3 | does not fit into any vehicle due to capacity\n4 | cannot be assigned due to max distance constraint of vehicles\n21 | could not be assigned due to relation constraint\n22 | could not be assigned due to allowed vehicle constraint\n23 | could not be assigned due to max-time-in-vehicle constraint\n24 | driver does not need a break\n25 | could not be assigned due to disallowed vehicle constraint\n26 | could not be assigned due to max drive time constraint\n27 | could not be assigned due to max job constraint\n28 | could not be assigned due to max activity constraint\n50 | underlying location cannot be accessed over road network by at least one vehicle\n',
    )
    id: Optional[str] = Field(None, description='Id of unassigned service/shipment')
    reason: Optional[str] = Field(
        None, description='Human readable reason as listed above'
    )


class DriveTimeBreak(BaseModel):
    duration: int = Field(
        ...,
        description='Specifies the duration of the break in seconds.',
        examples=[2700],
    )
    initial_driving_time: Optional[int] = Field(
        None,
        description='Specifies the initial (current) driving time of a driver to allow dynamic adaptations in seconds.',
        examples=[3600],
    )
    max_driving_time: int = Field(
        ...,
        description='Specifies the max driving time (in a row) without break in seconds.',
        examples=[14400],
    )
    possible_split: Optional[List[int]] = Field(
        None,
        description='Array specifying how a break duration (in seconds) can be split into several smaller breaks',
        examples=[[900, 1800]],
    )


class EncodedLineString(RootModel[str]):
    root: str = Field(
        ...,
        description="A polyline-encoded list of positions. You'll need to decode this string in client code. We provide open source code in [Java](https://github.com/graphhopper/graphhopper/blob/e649aaed8d3f4378bf2d8889bbbc2318261eabb2/web-api/src/main/java/com/graphhopper/http/WebHelper.java#L54) and [JavaScript](https://github.com/graphhopper/directions-api-js-client/blob/cf43d1a5bc93a3e8007a44fcfc551117e4fa49bc/src/GHUtil.js#L27).",
    )


class ErrorMessage(BaseModel):
    details: Optional[str] = Field(
        None,
        description='Details',
        examples=['class java.lang.IllegalArgumentException'],
    )
    message: Optional[str] = Field(
        None,
        description='error message',
        examples=[
            'unsupported json property [vehiles]. allowed properties: [vehicles, vehicle_types, services, shipments, relations, algorithm, objectives, cost_matrices, configuration]'
        ],
    )


class Hint(BaseModel):
    message: Optional[str] = None


class GHError(BaseModel):
    hints: Optional[List[Hint]] = Field(None, description='Optional error information.')
    message: Optional[str] = None


class GeocodingPoint(BaseModel):
    lat: Optional[float] = Field(None, description='Latitude')
    lng: Optional[float] = Field(None, description='Longitude')


class GroupRelation(BaseModel):
    groups: List[str] = Field(
        ...,
        description='An array of groups that should be related',
        examples=[['group-A', 'group-B']],
    )
    type: str = Field(
        ...,
        description='Specifies the type of relation. It must be either of type `in_sequence` or `in_direct_sequence`.\n',
        examples=['in_direct_sequence'],
    )


class InfoResponse(BaseModel):
    bbox: Optional[str] = Field(
        None,
        description='The bounding box of the geographical area covered by this GraphHopper instance. Format: `"minLon,minLat,maxLon,maxLat"\n',
    )
    features: Optional[Dict[str, Any]] = Field(
        None,
        description='The supported features, such as elevation, per vehicle profile.\n',
    )
    version: Optional[str] = Field(
        None,
        description='The version of the GraphHopper server that provided this response. This is not related to the API version.\n',
    )


class InternalErrorMessage(BaseModel):
    code: Optional[int] = Field(500, examples=[500])
    message: Optional[str] = Field(
        None,
        description='Details',
        examples=['There has been an internal server error.'],
    )


class Properties(BaseModel):
    bucket: Optional[int] = None


class JobId(BaseModel):
    job_id: Optional[UUID] = Field(
        None,
        description='UUID. Unique id for your job/request with which you can fetch your solution',
        examples=['44886560-b584-4da5-b245-768151dacd8f'],
    )


class JobRelation(BaseModel):
    ids: List[str] = Field(
        ...,
        description='Specifies an array of shipment and/or service ids that are in relation. If you deal with services then you need to use the id of your services in ids. To also consider sequences of the pickups and deliveries of your shipments, you need to use a special ID, i.e. use your shipment id plus the keyword `_pickup` or `_delivery`. If you want to place a service or shipment activity at the beginning of your route, use the special ID `start`. In turn, use `end` to place it at the end of the route.',
        examples=[['pickup-1', 'pickup-2']],
    )
    type: str = Field(
        ...,
        description='Specifies the type of relation. It must be either of type `in_same_route`, `in_sequence` or `in_direct_sequence`.\n\n`in_same_route`: As the name suggest, it enforces the specified services or shipments to be in the same route. It can be specified as follows:\n\n```json\n{\n   "type": "in_same_route",\n   "ids": ["serv_i_id","serv_j_id"]\n}\n```\n\nThis enforces service i to be in the same route as service j no matter which vehicle will be employed. If a specific vehicle (driver) is required to conduct this, just add a `vehicle_id` like this:\n\n```\n{\n   "type": "in_same_route",\n   "ids": ["serv_i_id","serv_j_id"],\n   "vehicle_id": "vehicle1"\n}\n```\n\nThis not only enforce service i and j to be in the same route, but also makes sure that both services are in the route of `vehicle1`.\n\n*Tip*: This way initial loads and vehicle routes can be modelled. For example, if your vehicles are already on the road and new orders come in, then vehicles can still be rescheduled subject to the orders that have already been assigned to these vehicles.\n\n\n\n`in_sequence`: This relation type enforces n jobs to be in sequence. It can be specified as\n\n```json\n{\n   "type": "in_sequence",\n   "ids": ["serv_i_id","serv_j_id"]\n}\n```\n\nwhich means that service j need to be in the same route as service i AND it needs to occur somewhere after service i. As described above if a specific vehicle needs to conduct this, just add `vehicle_id`.\n\n\n`in_direct_sequence`: This enforces n services or shipments to be in direct sequence. It can be specified as\n\n```json\n{\n   "type": "in_direct_sequence",\n   "ids": ["serv_i_id","serv_j_id","serv_k_id"]\n}\n```\n\nyielding service j to occur directly after service i, and service k to occur directly after service j i.e. in strong order. Again, a vehicle can be assigned a priority by adding a `vehicle_id` to the relation.\n\n\n*Special IDs*:\nIf you look at the previous example and you want service i to be the first in the route, use the special ID `start` as follows:\n\n```json\n{\n   "type": "in_direct_sequence",\n   "ids": ["start","serv_i_id","serv_j_id","serv_k_id"]\n}\n```\n\nLatter enforces the direct sequence of i, j and k at the beginning of the route. If this sequence should be bound to the end of the route, use the special ID `end` like this:\n\n```json\n{\n   "type": "in_direct_sequence",\n   "ids": ["serv_i_id","service_j_id","serv_k_id","end"]\n}\n```\n\nIf you deal with services then you need to use the \'id\' of your services in the field \'ids\'. To also consider sequences of the pickups and deliveries of your shipments, you need to use a special ID, i.e. use the shipment id plus the keyword `_pickup` or `_delivery`. For example, to ensure that the pickup and delivery of the shipment with the id \'my_shipment\' are direct neighbors, you need the following specification:\n\n```\n{\n   "type": "in_direct_sequence",\n   "ids": ["my_ship_pickup","my_ship_delivery"]\n}\n```\n\n',
        examples=['in_direct_sequence'],
    )
    vehicle_id: Optional[str] = Field(
        None,
        description='Id of pre-assigned vehicle, i.e. the vehicle id that is determined to conduct the services and shipments in this relation.',
        examples=['driver-Peter'],
    )


class LineString(BaseModel):
    coordinates: Optional[List[List[float]]] = Field(
        None,
        description='A list of coordinate pairs or triples, `[lon,lat]` or `[lon,lat,elevation]`.\n',
    )
    type: Optional[str] = None


class Hint1(BaseModel):
    details: Optional[str] = Field(None, description='Details of this hint')
    invalid_from_points: Optional[List[float]] = Field(
        None,
        description='Optional. An array of from_point indices of points that could not be found. Will only be added if `fail_fast=false` and some `from_point`s were not found.`',
    )
    invalid_to_points: Optional[List[float]] = Field(
        None,
        description='Optional. An array of to_point indices of points that could not be found. Will only be added if `fail_fast=false` and some `to_point`s were not found.`',
    )
    message: Optional[str] = Field(None, description='Short description of this hint')
    point_pairs: Optional[List[List[float]]] = Field(
        None,
        description='Optional. An array of two-element arrays representing the from/to_point indices of points for which no connection could be found. Will only be added if `fail_fast=false` and some connections were not found.',
    )


class Type2(Enum):
    min = 'min'
    min_max = 'min-max'


class Value(Enum):
    completion_time = 'completion_time'
    transport_time = 'transport_time'
    vehicles = 'vehicles'
    activities = 'activities'


class Objective1(BaseModel):
    type: Type2 = Field(
        ...,
        description='Type of objective function, i.e. `min` or `min-max`.\n\n * `min`: Minimizes the objective value.\n * `min-max`: Minimizes the maximum objective value.\n\nFor instance, `min` -> `vehicles` minimizes the number of employed vehicles.\n`min` -> `completion_time` minimizes the sum of your vehicle routes\' completion time.\n\nIf you use, for example, `min-max` -> `completion_time`, it minimizes the maximum of your vehicle routes\' completion time, i.e. it minimizes the overall makespan.\nThis only makes sense if you have more than one vehicle. In case of one vehicle, switching from `min` to `min-max` should not have any impact.\nIf you have more than one vehicle, then the algorithm tries to constantly move stops from one vehicle to another such that\nthe completion time of longest vehicle route can be further reduced. For example, if you have one vehicle that takes 8 hours\nto serve all customers, adding another vehicle (and using `min-max`) might halve the time to serve all customers to 4 hours. However,\nthis usually comes with higher transport costs.\n\nIf you want to minimize `vehicles` first and, second, `completion_time`, you can also combine different objectives like this:\n\n```json\n"objectives" : [\n   {\n      "type": "min",\n      "value": "vehicles"\n   },\n   {\n      "type": "min",\n      "value": "completion_time"\n   }\n]\n```\n\nIf you want to balance activities or the number of stops among all employed drivers, you need to specify it as follows:\n\n```json\n"objectives" : [\n   {\n      "type": "min-max",\n      "value": "completion_time"\n   },\n   {\n      "type": "min-max",\n      "value": "activities"\n   }\n]\n```\n',
    )
    value: Value = Field(
        ...,
        description="The value of the objective function.\nThe objective value `transport_time` solely considers the time\nyour drivers spend on the road, i.e. transport time. In contrary to `transport_time`, `completion_time` also takes waiting times at customer sites into account.\nThe `completion_time` of a route is defined as the time from starting to ending the route,\ni.e. the route's transport time, the sum of waiting times plus the sum of activity durations.\nNote that choosing `transport_time` or `completion_time` only makes a difference if you specified time windows for your services/shipments since only in\nscenarios with time windows waiting times can occur.\nThe objective value `vehicles` can only be used along with `min` and minimizes vehicles.\n",
    )


class Polygon(BaseModel):
    coordinates: Optional[List[List[List[float]]]] = None
    type: Optional[str] = None


class ResponseInfo(BaseModel):
    copyrights: Optional[List[str]] = Field(
        None,
        description='Attribution according to our documentation is necessary if no white-label option included.',
    )
    took: Optional[float] = None


class RoutePoint(BaseModel):
    coordinates: Optional[List[Dict[str, Any]]] = None
    type: Optional[str] = None


class Algorithm1(Enum):
    round_trip = 'round_trip'
    alternative_route = 'alternative_route'


class Curbside1(Enum):
    any = 'any'
    right = 'right'
    left = 'left'


class Instruction(BaseModel):
    distance: Optional[float] = Field(
        None, description='The distance for this instruction, in meters.\n'
    )
    exit_number: Optional[int] = Field(
        None,
        description='Only available for roundabout instructions (sign is 6). The count of exits at which the route leaves the roundabout.\n',
    )
    interval: Optional[List[int]] = Field(
        None,
        description='Two indices into `points`, referring to the beginning and the end of the segment of the route\nthis instruction refers to.\n',
    )
    sign: Optional[int] = Field(
        None,
        description='A number which specifies the sign to show:\n\n| sign | description  |\n|---|---|\n|-98| an U-turn without the knowledge if it is a right or left U-turn |\n| -8| a left U-turn |\n| -7| keep left |\n| -6| **not yet used**: leave roundabout |\n| -3| turn sharp left |\n| -2| turn left |\n| -1| turn slight left |\n|  0| continue on street |\n|  1| turn slight right |\n|  2| turn right |\n|  3| turn sharp right |\n|  4| the finish instruction before the last point |\n|  5| the instruction before a via point |\n|  6| the instruction before entering a roundabout |\n|  7| keep right |\n|  8| a right U-turn |\n|  *| **For future compatibility** it is important that all clients are able to handle also unknown instruction sign numbers\n',
    )
    street_name: Optional[str] = Field(
        None,
        description='The name of the street to turn onto in order to follow the route.\n',
    )
    text: Optional[str] = Field(
        None,
        description='A description what the user has to do in order to follow the route. The language depends on the locale parameter.\n',
    )
    time: Optional[int] = Field(
        None, description='The duration for this instruction, in milliseconds.\n'
    )
    turn_angle: Optional[float] = Field(
        None,
        description='Only available for roundabout instructions (sign is 6). The radian of the route within the roundabout `0 < r < 2*PI` for clockwise and\n`-2*PI < r < 0` for counterclockwise turns.\n',
    )


class Points1(BaseModel):
    pass


Points2 = Points1


class Points3(LineString, Points1):
    pass


class Points(RootModel[Union[Points2, Points3]]):
    root: Union[Points2, Points3]


class SnappedWaypoints1(BaseModel):
    pass


SnappedWaypoints2 = SnappedWaypoints1


class SnappedWaypoints3(LineString, SnappedWaypoints1):
    pass


class SnappedWaypoints(RootModel[Union[SnappedWaypoints2, SnappedWaypoints3]]):
    root: Union[SnappedWaypoints2, SnappedWaypoints3]


class RouteResponsePath(BaseModel):
    ascend: Optional[float] = Field(None, description='The total ascent, in meters.\n')
    bbox: Optional[List[float]] = Field(
        None,
        description='The bounding box of the route geometry. Format: `[minLon, minLat, maxLon, maxLat]`.\n',
    )
    descend: Optional[float] = Field(
        None, description='The total descent, in meters.\n'
    )
    details: Optional[Dict[str, Any]] = Field(
        None,
        description='Details, as requested with the `details` parameter. Consider the value `{"street_name": [[0,2,"Frankfurter Stra√üe"],[2,6,"Zollweg"]]}`.\nIn this example, the route uses two streets: The first, Frankfurter Stra√üe, is\nused between `points[0]` and `points[2]`, and the second, Zollweg, between `points[2]` and `points[6]`.\nSee [here](https://discuss.graphhopper.com/t/2539) for discussion.\n',
    )
    distance: Optional[float] = Field(
        None,
        description="The total distance, in meters. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/).\n",
    )
    instructions: Optional[List[Instruction]] = Field(
        None,
        description='The instructions for this route. This feature is under active development, and our instructions can sometimes be misleading,\nso be mindful when using them for navigation.\n',
    )
    points: Optional[Points] = None
    points_encoded: Optional[bool] = Field(
        None,
        description='Whether the `points` and `snapped_waypoints` fields are polyline-encoded strings rather than JSON arrays\nof coordinates. See the field description for more information on the two formats.\n',
    )
    points_order: Optional[List[int]] = Field(
        None,
        description='An array of indices (zero-based), specifiying the order in which the input points are visited.\nOnly present if the `optimize` parameter was used.\n',
    )
    snapped_waypoints: Optional[SnappedWaypoints] = None
    time: Optional[int] = Field(
        None,
        description="The total travel time, in milliseconds. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/).\n",
    )


class CurbsideStrictness(Enum):
    ignore = 'ignore'
    soft = 'soft'
    strict = 'strict'


class NetworkDataProvider(Enum):
    openstreetmap = 'openstreetmap'
    tomtom = 'tomtom'


class SnapPrevention(Enum):
    motorway = 'motorway'
    trunk = 'trunk'
    bridge = 'bridge'
    ford = 'ford'
    tunnel = 'tunnel'
    ferry = 'ferry'


class Routing(BaseModel):
    calc_points: Optional[bool] = Field(
        False,
        description='It lets you specify whether the API should provide you with route geometries for vehicle routes or not. Thus, you do not need to do extra routing to get the polyline for each route.',
    )
    consider_traffic: Optional[bool] = Field(
        False,
        description='indicates whether historical traffic information should be considered',
    )
    curbside_strictness: Optional[CurbsideStrictness] = Field(
        'soft',
        description='In some cases curbside constraints cannot be fulfilled. For example in one-way streets you cannot arrive at a building that is on the left side of the street such that the building is to the right of you (unless you drove the one-way street the wrong/illegal way). You can set the `curbside_strictness` to `soft` to ignore the curbside constraint in such cases or set it to `strict` to get an error response instead. You can also set it to `ignore` to ignore all curbside constraints (this is useful to compare the results with and without constraints without modifying every single address).',
    )
    fail_fast: Optional[bool] = Field(
        True,
        description='indicates whether matrix calculation should fail fast when points cannot be connected',
    )
    network_data_provider: Optional[NetworkDataProvider] = Field(
        'openstreetmap',
        description='specifies the data provider, read more about it [here](#section/Map-Data-and-Routing-Profiles).',
    )
    return_snapped_waypoints: Optional[bool] = Field(
        False,
        description='Indicates whether a solution includes snapped waypoints. In contrary to the address coordinate a snapped waypoint is the access point to the (road) network.',
    )
    snap_preventions: Optional[List[SnapPrevention]] = Field(
        None,
        description='Prevents snapping locations to road links of specified road types, e.g. to motorway.',
        examples=[['motorway', 'trunk', 'bridge', 'tunnel', 'ferry']],
    )


class Type3(Enum):
    service = 'service'
    pickup = 'pickup'
    delivery = 'delivery'


class SnappedWaypoint(BaseModel):
    lat: Optional[float] = Field(
        None, description='Latitude of location.', examples=[51.512665]
    )
    lon: Optional[float] = Field(
        None, description='Longitude of location.', examples=[-0.092869]
    )


class Unassigned(BaseModel):
    breaks: Optional[List[str]] = Field(
        None, description='An array of ids of unassigned breaks'
    )
    details: Optional[List[Detail]] = Field(
        None,
        description='An array of details, i.e. reason for unassigned services or shipments',
        examples=[
            [
                {
                    'code': 3,
                    'id': 'service-1',
                    'reason': 'does not fit into any vehicle due to capacity',
                },
                {
                    'code': 27,
                    'id': 'service-2',
                    'reason': 'could not be assigned due to max job constraint',
                },
                {
                    'code': 2,
                    'id': 'shipment-5',
                    'reason': 'cannot be visited within time window',
                },
            ]
        ],
    )
    services: Optional[List[str]] = Field(
        None,
        description='An array of ids of unassigned services',
        examples=[['service-1', 'service-3']],
    )
    shipments: Optional[List[str]] = Field(
        None,
        description='An array of ids of unassigned shipments',
        examples=[['shipment-5']],
    )


class TimeWindow(BaseModel):
    earliest: Optional[int] = Field(
        0,
        description='Specifies the opening time of the time window in seconds, i.e. the earliest time the service can start.',
    )
    latest: Optional[int] = Field(
        9223372036854776000,
        description='Specifies the closing time of the time window in seconds, i.e. the latest time the service can start.',
    )


class TimeWindowBreak(BaseModel):
    duration: int = Field(
        ...,
        description='Specifies the duration of the break in seconds.',
        examples=[2700],
    )
    earliest: int = Field(
        ...,
        description='Specifies the earliest start time of the break in seconds.',
        examples=[1550136467],
    )
    latest: int = Field(
        ...,
        description='Specifies the latest start time of break in seconds.',
        examples=[1550148467],
    )


class Vehicle(BaseModel):
    break_: Optional[Union[TimeWindowBreak, DriveTimeBreak]] = Field(
        None, alias='break'
    )
    earliest_start: Optional[int] = Field(
        0,
        description='Earliest start of vehicle in seconds. It is recommended to use the unix timestamp.',
    )
    end_address: Optional[Address] = Field(
        None,
        description='If this is omitted AND return_to_depot is true then the vehicle needs to return to its start_address.',
    )
    latest_end: Optional[int] = Field(
        9223372036854776000,
        description='Latest end of vehicle in seconds, i.e. the time the vehicle needs to be at its end location at latest.',
    )
    max_activities: Optional[int] = Field(
        None,
        description='Specifies the maximum number of activities a vehicle can conduct.',
        examples=[24],
    )
    max_distance: Optional[int] = Field(
        None,
        description='Specifies the maximum distance (in meters) a vehicle can go.',
        examples=[400000],
    )
    max_driving_time: Optional[int] = Field(
        None,
        description='Specifies the maximum drive time (in seconds) a vehicle/driver can go, i.e. the maximum time on the road (service and waiting times are not included here)',
        examples=[28800],
    )
    max_jobs: Optional[int] = Field(
        None,
        description='Specifies the maximum number of jobs a vehicle can load.',
        examples=[12],
    )
    min_jobs: Optional[int] = Field(
        None,
        description='Specifies the minimum number of jobs a vehicle should load. This is a soft constraint, i.e. if it is not possible to fulfill ‚Äúmin_jobs‚Äù, we will still try to get as close as possible to this constraint.',
        examples=[12],
    )
    move_to_end_address: Optional[bool] = Field(
        None,
        description='Indicates whether a vehicle should be moved even though it has not been assigned any jobs.',
    )
    return_to_depot: Optional[bool] = Field(
        True,
        description="If it is false, the algorithm decides where to end the vehicle route. It ends in one of your customers' locations. The end is chosen such that it contributes to the overall objective function, e.g. min transport_time. If it is true, you can either specify a specific end location (which is then regarded as end depot) or you can leave it and the driver returns to its start location.",
    )
    skills: Optional[List[str]] = Field(
        None,
        description='Array of skills, i.e. array of string (not case sensitive).',
        examples=[['drilling_maschine', 'screw_driver']],
    )
    start_address: Address
    type_id: Optional[str] = Field(
        'default-type',
        description='The type ID assigns a vehicle type to this vehicle. You can specify types in the array of vehicle types. If you omit the type ID, the default type is used. The default type is a `car` with a capacity of 0.',
        examples=['my-own-type'],
    )
    vehicle_id: str = Field(
        ...,
        description='Specifies the ID of the vehicle. Ids must be unique, i.e. if there are two vehicles with the same ID, an error is returned.',
        examples=['vehicle-1'],
    )


class VehicleProfileId(Enum):
    car = 'car'
    bike = 'bike'
    foot = 'foot'
    hike = 'hike'
    mtb = 'mtb'
    racingbike = 'racingbike'
    scooter = 'scooter'
    truck = 'truck'
    small_truck = 'small_truck'


class VehicleType(BaseModel):
    capacity: Optional[List[int]] = Field(
        [0],
        description='Specifies an array of capacity dimension values which need to be int values. For example, if there are two dimensions such as volume and weight then it needs to be defined as [ 1000, 300 ] assuming a maximum volume of 1000 and a maximum weight of 300.',
        examples=[[100, 500]],
    )
    consider_traffic: Optional[bool] = Field(
        False,
        description='Specifies whether traffic should be considered. if "tomtom" is used and this is false, free flow travel times from "tomtom" are calculated. If this is true, historical traffic info are used. We do not yet have traffic data for "openstreetmap", thus, setting this true has no effect at all.',
    )
    cost_per_activation: Optional[float] = Field(
        None,
        description='**_BETA feature_**! Cost parameter vehicle activation, i.e. fixed costs per vehicle',
    )
    cost_per_meter: Optional[float] = Field(
        None,
        description='**_BETA feature_**! Cost parameter per distance unit, here meter is used',
    )
    cost_per_second: Optional[float] = Field(
        None,
        description='**_BETA feature_**! Cost parameter per time unit, here second is used',
    )
    network_data_provider: Optional[NetworkDataProvider] = Field(
        'openstreetmap',
        description='Specifies the network data provider. Either use [`openstreetmap`](#section/Map-Data-and-Routing-Profiles/OpenStreetMap) (default) or [`tomtom`](#section/Map-Data-and-Routing-Profiles/TomTom) (add-on required).',
    )
    profile: Optional[VehicleProfileId] = 'car'
    service_time_factor: Optional[float] = Field(
        1,
        description='Specifies a service time factor for this vehicle type. If the vehicle/driver that uses this type is able to conduct the service as double as fast as it is determined in the corresponding service or shipment then set it to 0.5.',
    )
    speed_factor: Optional[float] = Field(
        1,
        description='Specifies a speed factor for this vehicle type. If the vehicle that uses this type needs to be only half as fast as what is actually calculated with our routing engine then set the speed factor to 0.5.',
    )
    type_id: str = Field(
        ...,
        description='Specifies the id of the vehicle type. If a vehicle needs to be of this type, it should refer to this with its type_id attribute.',
        examples=['my-own-type'],
    )


class ClusterSolutionJobIdGetResponse(BaseModel):
    message: Optional[str] = Field(
        None,
        description='Error message',
        examples=['Invalid job_id 73314c89-ee4b-459c-aca4-0ad6d6e558da'],
    )
    status: Optional[str] = Field(
        'finished', description='status', examples=['finished']
    )


class Weighting(Enum):
    fastest = 'fastest'
    shortest = 'shortest'


class CurbsideEnum(Enum):
    any = 'any'
    right = 'right'
    left = 'left'


class FromCurbsideEnum(Enum):
    any = 'any'
    right = 'right'
    left = 'left'


class ToCurbsideEnum(Enum):
    any = 'any'
    right = 'right'
    left = 'left'


class Point(RootModel[List[str]]):
    root: List[str]


class FromPoint(RootModel[List[str]]):
    root: List[str]


class ToPoint(RootModel[List[str]]):
    root: List[str]


class PointHint(RootModel[List[str]]):
    root: List[str]


class FromPointHint(RootModel[List[str]]):
    root: List[str]


class ToPointHint(RootModel[List[str]]):
    root: List[str]


class SnapPrevention1(RootModel[List[str]]):
    root: List[str]


class Curbside2(RootModel[List[CurbsideEnum]]):
    root: List[CurbsideEnum]


class FromCurbside(RootModel[List[FromCurbsideEnum]]):
    root: List[FromCurbsideEnum]


class ToCurbside(RootModel[List[ToCurbsideEnum]]):
    root: List[ToCurbsideEnum]


class OutArray(RootModel[List[str]]):
    root: List[str]


class Curbside3(RootModel[List[CurbsideEnum]]):
    root: List[CurbsideEnum]


class Details(RootModel[List[str]]):
    root: List[str]


class Heading(RootModel[List[int]]):
    root: List[int]


class VrpSolutionJobIdGetResponse(BaseModel):
    message: Optional[str] = Field(
        None,
        description='Error message',
        examples=['Invalid job_id 73314c89-ee4b-459c-aca4-0ad6d6e558da'],
    )
    status: Optional[str] = Field(
        'finished', description='status', examples=['finished']
    )


class BadRequest(BaseModel):
    hints: Optional[List[ErrorMessage]] = Field(
        None, description='Optional error information.'
    )
    message: Optional[str] = Field(
        None, description='Short error message', examples=['Bad Request']
    )
    status: Optional[str] = Field(
        'finished', description='status', examples=['finished']
    )


class ClusterConfiguration(BaseModel):
    clustering: Optional[ClusterConfigurationClustering] = None
    response_type: Optional[str] = Field(
        'json',
        description='Specifies the response format. You can either choose `geojson` or `json`.',
        examples=['json'],
    )
    routing: Optional[ClusterConfigurationRouting] = None


class ClusterCustomer(BaseModel):
    address: Optional[ClusterCustomerAddress] = None
    id: Optional[str] = Field(
        None, description='id of customer', examples=['GraphHopper GmbH']
    )
    quantity: Optional[float] = Field(
        None, description='demand of customer', examples=[10]
    )


class ClusterRequest(BaseModel):
    configuration: Optional[ClusterConfiguration] = None
    customers: Optional[List[ClusterCustomer]] = None


class Configuration(BaseModel):
    routing: Optional[Routing] = None


class GeocodingLocation(BaseModel):
    city: Optional[str] = Field(None, description='The city of the address')
    country: Optional[str] = Field(None, description='The country of the address')
    housenumber: Optional[str] = Field(
        None, description='The housenumber of the address'
    )
    name: Optional[str] = Field(
        None, description='The name of the entity. Can be a boundary, POI, address, etc'
    )
    osm_id: Optional[str] = Field(None, description='The OSM ID of the entity')
    osm_key: Optional[str] = Field(None, description='The OSM key of the entity')
    osm_type: Optional[str] = Field(None, description='N = node, R = relation, W = way')
    point: Optional[GeocodingPoint] = None
    postcode: Optional[str] = Field(None, description='The postcode of the address')
    state: Optional[str] = Field(None, description='The state of the address')
    street: Optional[str] = Field(None, description='The street of the address')


class GeocodingResponse(BaseModel):
    hits: Optional[List[GeocodingLocation]] = None
    took: Optional[float] = Field(None, description='in ms')


class IsochroneResponsePolygon(BaseModel):
    geometry: Optional[Polygon] = None
    properties: Optional[Properties] = None
    type: Optional[str] = None


class MatrixRequest(BaseModel):
    fail_fast: Optional[bool] = Field(
        True,
        description='Specifies whether or not the matrix calculation should return with an error as soon as possible in case some points cannot be found or some points are not connected. If set to `false` the time/weight/distance matrix will be calculated for all valid points and contain the `null` value for all entries that could not be calculated. The `hint` field of the response will also contain additional information about what went wrong (see its documentation).',
    )
    from_curbsides: Optional[List[str]] = Field(
        None, description='See `curbsides`of symmetrical matrix'
    )
    from_point_hints: Optional[List[str]] = Field(
        None, description='See `point_hints`of symmetrical matrix'
    )
    from_points: Optional[List[List[float]]] = Field(
        None,
        description='The starting points for the routes in an array of `[longitude,latitude]`. For instance, if you want to calculate three routes from point A such as A->1, A->2, A->3 then you have one `from_point` parameter and three `to_point` parameters.',
    )
    out_arrays: Optional[List[str]] = Field(
        None,
        description='Specifies which matrices should be included in the response. Specify one or more of the following options `weights`, `times`, `distances`. The units of the entries of `distances` are meters, of `times` are seconds and of `weights` is arbitrary and it can differ for different vehicles or versions of this API.',
    )
    snap_preventions: Optional[List[str]] = Field(
        None, description='See `snap_preventions` of symmetrical matrix'
    )
    to_curbsides: Optional[List[str]] = Field(
        None, description='See `curbsides`of symmetrical matrix'
    )
    to_point_hints: Optional[List[str]] = Field(
        None, description='See `point_hints`of symmetrical matrix'
    )
    to_points: Optional[List[List[float]]] = Field(
        None,
        description='The destination points for the routes in an array of `[longitude,latitude]`.',
    )
    turn_costs: Optional[bool] = Field(
        False,
        description='Specifies if turn restrictions should be considered. Enabling this option increases the matrix computation time. Only supported for motor vehicles and OpenStreetMap.',
    )
    vehicle: Optional[VehicleProfileId] = 'car'


class MatrixResponse(BaseModel):
    distances: Optional[List[List[float]]] = Field(
        None,
        description='The distance matrix for the specified points in the same order as the time matrix. The distances are in meters. If `fail_fast=false` the matrix will contain `null` for connections that could not be found.',
    )
    hints: Optional[List[Hint1]] = Field(
        None, description='Optional. Additional response data.'
    )
    info: Optional[ResponseInfo] = None
    times: Optional[List[List[float]]] = Field(
        None,
        description='The time matrix for the specified points in the order [[from1->to1, from1->to2, ...], [from2->to1, from2->to2, ...], ...]. The times are in seconds. If `fail_fast=false` the matrix will contain `null` for connections that could not be found.',
    )
    weights: Optional[List[List[float]]] = Field(
        None,
        description='The weight matrix for the specified points in the same order as the time matrix. The weights for different vehicles can have a different unit but the weights array is perfectly suited as input for Vehicle Routing Problems as it is currently faster to calculate. If `fail_fast=false` the matrix will contain `null` for connections that could not be found.',
    )


class ResponseAddress(BaseModel):
    lat: Optional[float] = Field(
        None, description='Latitude of location.', examples=[51.512665]
    )
    location_id: Optional[str] = Field(
        None,
        description='Specifies the id of the location.',
        examples=['550e8400-e29b-11d4-a716-446655440000'],
    )
    lon: Optional[float] = Field(
        None, description='Longitude of location.', examples=[-0.092869]
    )
    name: Optional[str] = Field(
        None,
        description='Name of location.',
        examples=['Queens Victoria Street 70, Second Floor, Flat 245'],
    )
    snapped_waypoint: Optional[SnappedWaypoint] = None
    street_hint: Optional[str] = Field(
        None,
        description='Optional parameter. Specifies a hint for each address to better snap the coordinates (lon,lat) to road network. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.',
        examples=['Queens Victoria Street 70'],
    )


class RouteRequest(BaseModel):
    algorithm: Optional[Algorithm1] = Field(
        None,
        description='Rather than looking for the shortest or fastest path, this lets you solve two different problems related to routing:\nWith `round_trip`, the route will get you back to where you started. This is meant for fun (think of\na bike trip), so we will add some randomness. This requires `ch.disable=true`.\nWith `alternative_route`, we give you not one but several routes that are close to optimal, but\nnot too similar to each other. You can control both of these features with additional parameters, see below.\n',
    )
    alternative_route_max_paths: Optional[int] = Field(
        2,
        alias='alternative_route.max_paths',
        description='If `algorithm=alternative_route`, this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives.\n',
    )
    alternative_route_max_share_factor: Optional[float] = Field(
        0.6,
        alias='alternative_route.max_share_factor',
        description='If `algorithm=alternative_route`, this parameter specifies how similar an alternative route can be to the optimal route. Increasing can lead to worse alternatives.\n',
    )
    alternative_route_max_weight_factor: Optional[float] = Field(
        1.4,
        alias='alternative_route.max_weight_factor',
        description='If `algorithm=alternative_route`, this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives.\n',
    )
    avoid: Optional[str] = Field(
        None,
        description='Specify which road classes and environments you would like to avoid.\nPossible values are `motorway`, `steps`, `track`, `toll`, `ferry`, `tunnel` and `bridge`.\nSeparate several values with `;`. Obviously not all the values make sense for all vehicle profiles e.g. `bike` is already forbidden on a `motorway`. Requires `ch.disable=true`.\n',
    )
    block_area: Optional[str] = Field(
        None,
        description='Block road access via a point with the format `latitude,longitude`\nor an area defined by a circle `lat,lon,radius` or a rectangle `lat1,lon1,lat2,lon2`.\nSeparate several values with `;`. Requires `ch.disable=true`.\n',
    )
    calc_points: Optional[bool] = Field(
        True, description='If the points for the route should be calculated at all.\n'
    )
    ch_disable: Optional[bool] = Field(
        False,
        alias='ch.disable',
        description='Use this parameter in combination with one or more parameters from below.\n',
    )
    curbsides: Optional[List[Curbside1]] = Field(
        None,
        description='Optional parameter. It specifies on which side a point should be relative to the driver when she leaves/arrives at a start/target/via point. You need to specify this parameter for either none or all points. Only supported for motor vehicles and OpenStreetMap.',
        examples=[['any', 'right']],
    )
    debug: Optional[bool] = Field(
        False, description='If `true`, the output will be formatted.\n'
    )
    details: Optional[List[str]] = Field(
        None,
        description='Optional parameter to retrieve path details. You can request additional details for the route: `street_name`,\n`time`, `distance`, `max_speed`, `toll`, `road_class`, `road_class_link`, `road_access`, `road_environment`, `lanes`, and `surface`. Read more about the usage of path details [here](https://discuss.graphhopper.com/t/2539).\n',
    )
    elevation: Optional[bool] = Field(
        False,
        description='If `true`, a third coordinate, the altitude, is included with all positions in the response.\nThis changes the format of the `points` and `snapped_waypoints` fields of the response, in both their\nencodings. Unless you switch off the `points_encoded` parameter, you need special code on the\nclient side that can handle three-dimensional coordinates.\nA request can fail if the vehicle profile does not support elevation. See the features object for every vehicle profile.\n',
    )
    heading_penalty: Optional[int] = Field(
        120,
        description='Time penalty in seconds for not obeying a specified heading. Requires `ch.disable=true`.\n',
    )
    headings: Optional[List[int]] = Field(
        None,
        description='Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points.\nIn this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree.\nThis parameter also influences the tour generated with `algorithm=round_trip` and forces the initial direction.  Requires `ch.disable=true`.\n',
    )
    instructions: Optional[bool] = Field(
        True, description='If instructions should be calculated and returned\n'
    )
    locale: Optional[str] = Field(
        'en',
        description='The locale of the resulting turn instructions. E.g. `pt_PT` for Portuguese or `de` for German.\n',
    )
    optimize: Optional[str] = Field(
        'false',
        description='Normally, the calculated route will visit the points in the order you specified them.\nIf you have more than two points, you can set this parameter to `"true"` and the points may be re-ordered to minimize the total travel time.\nKeep in mind that the limits on the number of locations of the Route Optimization API applies, and the request costs more credits.\n',
    )
    pass_through: Optional[bool] = Field(
        False,
        description='If `true`, u-turns are avoided at via-points with regard to the `heading_penalty`. Requires `ch.disable=true`.\n',
    )
    point_hints: Optional[List[str]] = Field(
        None,
        description='Optional parameter. Specifies a hint for each point in the `points` array to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.',
        examples=[['Lindenschmitstra√üe', 'Thalkirchener Str.']],
    )
    points: Optional[List[List[float]]] = Field(
        None,
        description='The points for the route in an array of `[longitude,latitude]`. For instance, if you want to calculate a route from point A to B to C\nthen you specify `points: [ [A_longitude, A_latitude], [B_longitude, B_latitude], [C_longitude, C_latitude]]\n',
        examples=[[[11.539421, 48.118477], [11.559023, 48.12228]]],
    )
    points_encoded: Optional[bool] = Field(
        True,
        description='Allows changing the encoding of location data in the response. The default is polyline encoding, which is compact\nbut requires special client code to unpack. (We provide it in our JavaScript client library!)\nSet this parameter to `false` to switch the encoding to simple coordinate pairs like `[lon,lat]`, or `[lon,lat,elevation]`.\nSee the description of the response format for more information.\n',
    )
    round_trip_distance: Optional[int] = Field(
        10000,
        alias='round_trip.distance',
        description='If `algorithm=round_trip`, this parameter configures approximative length of the resulting round trip. Requires `ch.disable=true`.\n',
    )
    round_trip_seed: Optional[int] = Field(
        None,
        alias='round_trip.seed',
        description='If `algorithm=round_trip`, this sets the random seed. Change this to get a different tour for each value.\n',
    )
    snap_preventions: Optional[List[str]] = Field(
        None,
        description='Optional parameter to avoid snapping to a certain road class or road environment. Current supported values `motorway`, `trunk`, `ferry`, `tunnel`, `bridge` and `ford`',
        examples=[['motorway', 'ferry', 'tunnel']],
    )
    vehicle: Optional[VehicleProfileId] = Field('car', examples=['bike'])
    weighting: Optional[str] = Field(
        'fastest',
        description="Determines the way the ''best'' route is calculated. Default is `fastest`. Other options are `shortest` (e.g. for `vehicle=foot` or `bike`) and `short_fastest` which finds a reasonable balance between `shortest` and `fastest`. Requires `ch.disable=true`.\n",
    )


class RouteResponse(BaseModel):
    info: Optional[ResponseInfo] = None
    paths: Optional[List[RouteResponsePath]] = None


class Service(BaseModel):
    address: Optional[Address] = None
    allowed_vehicles: Optional[List[str]] = Field(
        None,
        description='Specifies an array of allowed vehicles, i.e. array of vehicle ids. For example, if this service can only be conducted EITHER by `technician_peter` OR `technician_stefan` specify this as follows: `["technician_peter","technician_stefan"]`.',
        examples=[['technician_peter', 'technician_stefan']],
    )
    disallowed_vehicles: Optional[List[str]] = Field(
        None,
        description='Specifies an array of disallowed vehicles, i.e. array of vehicle ids.',
        examples=[['driver-A', 'driver-B']],
    )
    duration: Optional[conint(ge=0, le=604800)] = Field(
        0,
        description='Specifies the duration of the service in seconds, i.e. how long it takes at the customer site.',
        examples=[1800],
    )
    group: Optional[str] = Field(
        None,
        description='Group this service belongs to. See the group relation and [this post](https://discuss.graphhopper.com/t/4040) on how to utilize this.',
        examples=['group-A'],
    )
    id: str = Field(
        ...,
        description='Specifies the id of the service. Ids need to be unique so there must not be two services/shipments with the same id.',
        examples=['7fe77504-7df8-4497-843c-02d70b6490ce'],
    )
    max_time_in_vehicle: Optional[int] = Field(
        9223372036854776000,
        description='Specifies the maximum time in seconds a delivery can stay in the vehicle. Currently, it only works with services of "type":"delivery".',
        examples=[900],
    )
    name: Optional[str] = Field(
        None,
        description='Meaningful name for service, e.g. `"deliver pizza"`.',
        examples=['delivery pizza'],
    )
    preparation_time: Optional[conint(ge=0, le=604800)] = Field(
        0,
        description='Specifies the preparation time in seconds. It can be used to model parking lot search time since if you have 3 identical locations in a row, it only falls due once.',
        examples=[300],
    )
    priority: Optional[int] = Field(
        2,
        description='Specifies the priority. Can be 1 = high priority to 10 = low priority. Often there are more services/shipments than the available vehicle fleet can handle. Then you can set priorities to differentiate high priority tasks from those that could be left unassigned. I.e. the lower the priority the earlier these tasks are omitted in the solution.',
        examples=[1],
    )
    required_skills: Optional[List[str]] = Field(
        None,
        description='Specifies an array of required skills, i.e. array of string (not case sensitive). For example, if this service needs to be conducted by a technician having a `drilling_machine` and a `screw_driver` then specify the array as follows: `["drilling_machine","screw_driver"]`. This means that the service can only be done by a vehicle (technician) that has the skills `drilling_machine` AND `screw_driver` in its skill array. Otherwise it remains unassigned.',
        examples=[['drilling_machine', 'screw_driver']],
    )
    size: Optional[List[int]] = Field(
        [0],
        description='Size can have multiple dimensions and should be in line with the capacity dimension array of the vehicle type. For example, if the item that needs to be delivered has two size dimension, volume and weight, then specify it as follow [ 20, 5 ] assuming a volume of 20 and a weight of 5.',
        examples=[[30, 5, 1]],
    )
    time_windows: Optional[List[TimeWindow]] = Field(
        None,
        description='Specifies an array of time window objects (see time_window object below). Specify the time either with the recommended Unix time stamp (the number of seconds since 1970-01-01) or you can also count the seconds relative to Monday morning 00:00 and define the whole week in seconds. For example, Monday 9am is then represented by 9hour * 3600sec/hour = 32400. In turn, Wednesday 1pm corresponds to 2day * 24hour/day * 3600sec/hour + 1day * 13hour/day * 3600sec/hour = 219600. See this tutorial for more information.',
        examples=[
            [{'earliest': 32400, 'latest': 36000}, {'earliest': 50400, 'latest': 54000}]
        ],
    )
    type: Optional[Type3] = Field(
        'service',
        description='Specifies type of service. This makes a difference if items are loaded or unloaded, i.e. if one of the size dimensions > 0. If it is specified as `service` or `pickup`, items are loaded and will stay in the vehicle for the rest of the route (and thus consumes capacity for the rest of the route). If it is a `delivery`, items are implicitly loaded at the beginning of the route and will stay in the route until delivery (and thus releases capacity for the rest of the route).',
        examples=['delivery'],
    )


class Stop(BaseModel):
    address: Optional[Address] = Field(
        None, description='Specifies pickup or delivery address.'
    )
    duration: Optional[conint(ge=0, le=604800)] = Field(
        0,
        description='Specifies the duration of the pickup or delivery in seconds, e.g. how long it takes unload items at the customer site.',
        examples=[1800],
    )
    group: Optional[str] = Field(
        None,
        description='Group this stop belongs to. See the group relation and [this post](https://discuss.graphhopper.com/t/4040) on how to utilize this.',
        examples=['ASAP'],
    )
    preparation_time: Optional[conint(ge=0, le=604800)] = Field(
        0,
        description='Specifies the preparation time in seconds. It can be used to model parking lot search time since if you have 3 identical locations in a row, it only falls due once.',
        examples=[300],
    )
    time_windows: Optional[List[TimeWindow]] = Field(
        None,
        description='Specifies an array of time window objects (see time window object below). For example, if an item needs to be delivered between 7am and 10am then specify the array as follows: [ { "earliest": 25200, "latest" : 32400 } ] (starting the day from 0 in seconds).',
        examples=[
            [{'earliest': 32400, 'latest': 36000}, {'earliest': 50400, 'latest': 54000}]
        ],
    )


class SymmetricalMatrixRequest(BaseModel):
    curbsides: Optional[List[str]] = Field(
        None,
        description='Optional parameter. It specifies on which side a point should be relative to the driver when she leaves/arrives at a start/target/via point. You need to specify this parameter for either none or all points. Only supported for motor vehicles and OpenStreetMap.',
    )
    fail_fast: Optional[bool] = Field(
        True,
        description='Specifies whether or not the matrix calculation should return with an error as soon as possible in case some points cannot be found or some points are not connected. If set to `false` the time/weight/distance matrix will be calculated for all valid points and contain the `null` value for all entries that could not be calculated. The `hint` field of the response will also contain additional information about what went wrong (see its documentation).',
    )
    out_arrays: Optional[List[str]] = Field(
        None,
        description='Specifies which matrices should be included in the response. Specify one or more of the following options `weights`, `times`, `distances`. The units of the entries of `distances` are meters, of `times` are seconds and of `weights` is arbitrary and it can differ for different vehicles or versions of this API.',
    )
    point_hints: Optional[List[str]] = Field(
        None,
        description='Optional parameter. Specifies a hint for each point in the `points` array to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.',
    )
    points: Optional[List[List[float]]] = Field(
        None,
        description='Specify multiple points for which the weight-, route-, time- or distance-matrix should be calculated as follows: `[longitude,latitude]`. In this case the origins are identical to the destinations. Thus, if there are N points, NxN entries are calculated. The order of the point parameter is important. Specify at least three points. Cannot be used together with `from_point` or `to_point.`.',
    )
    snap_preventions: Optional[List[str]] = Field(
        None,
        description='Optional parameter to avoid snapping to a certain road class or road environment. Current supported values `motorway`, `trunk`, `ferry`, `tunnel`, `bridge` and `ford`',
    )
    turn_costs: Optional[bool] = Field(
        False,
        description='Specifies if turn restrictions should be considered. Enabling this option increases the matrix computation time. Only supported for motor vehicles and OpenStreetMap.',
    )
    vehicle: Optional[VehicleProfileId] = 'car'


class MatrixPostRequest(RootModel[Union[MatrixRequest, SymmetricalMatrixRequest]]):
    root: Union[MatrixRequest, SymmetricalMatrixRequest]


class MatrixCalculatePostRequest(
    RootModel[Union[MatrixRequest, SymmetricalMatrixRequest]]
):
    root: Union[MatrixRequest, SymmetricalMatrixRequest]


class Activity(BaseModel):
    address: Optional[ResponseAddress] = None
    arr_date_time: Optional[datetime] = Field(
        None,
        description='Arrival date time with offset like this 1970-01-01T01:00+01:00. If you do not use time-dependent optimization, this is `null`.',
    )
    arr_time: Optional[int] = Field(
        None,
        description='Arrival time at this activity in seconds. If type is `start`, this is not available (since it makes no sense to have `arr_time` at start). However, `end_time` is available and actually means \\"departure time\\" at start location. It is important to note that `arr_time` does not necessarily mean \\"start of underlying activity\\", it solely means arrival time at activity location. If this activity has no time windows and if there are no further preparation times, `arr_time` is equal to activity start time.',
    )
    distance: Optional[int] = Field(
        None, description='cumulated distance from start to this activity in m'
    )
    driving_time: Optional[int] = Field(
        None,
        description='cumulated driving time from start to this driver activity in seconds',
    )
    end_date_time: Optional[datetime] = Field(
        None,
        description='End date time with offset like this 1970-01-01T01:00+01:00. If you do not use time-dependent optimization, this is `null`.',
    )
    end_time: Optional[int] = Field(
        None,
        description='End time of and thus departure time at this activity. If type is `end`, this is not available (since it makes no sense to have an `end_time` at end) `end_time` at each activity is equal to the departure time at the activity location.',
    )
    id: Optional[str] = Field(
        None,
        description='Id referring to the underlying service or shipment, i.e. the shipment or service this activity belongs to',
    )
    load_after: Optional[List[int]] = Field(
        None, description='Array with size/capacity dimensions after this activity'
    )
    load_before: Optional[List[int]] = Field(
        None, description='Array with size/capacity dimensions before this activity'
    )
    location_id: Optional[str] = Field(None, description='Id that refers to address')
    preparation_time: Optional[int] = Field(
        None, description='preparation time at this activity in seconds'
    )
    type: Optional[Type] = Field(None, description='type of activity')
    waiting_time: Optional[int] = Field(
        None,
        description='Waiting time at this activity in seconds. A waiting time can occur if the activity has at least one time window. If `arr_time` < `time_window.earliest` a waiting time of `time_window_earliest` - `arr_time` occurs.',
    )


class IsochroneResponse(BaseModel):
    copyrights: Optional[List[str]] = None
    polygons: Optional[List[IsochroneResponsePolygon]] = Field(
        None,
        description='The list of polygons in GeoJson format. It can be used e.g. in the Leaflet framework:\n\n```\nL.geoJson(json.polygons).addTo(map)\n```\n\nThe number of polygon is identical to the specified buckets in the query. Every polygon contains the bucket number in the properties section of the GeoJson.\n',
    )


class Pickup(RootModel[Stop]):
    root: Stop


class Route(BaseModel):
    activities: Optional[List[Activity]] = Field(
        None,
        description='Array of activities',
        examples=[
            [
                {
                    'address': {'lat': 52.537, 'location_id': 'berlin', 'lon': 13.406},
                    'distance': 0,
                    'driving_time': 0,
                    'end_date_time': '2019-02-25T20:20+01:00',
                    'end_time': 1551122400,
                    'load_after': [0],
                    'location_id': 'berlin',
                    'preparation_time': 0,
                    'type': 'start',
                    'waiting_time': 0,
                },
                {
                    'address': {
                        'lat': 52.527094,
                        'location_id': '13.408642_52.527094',
                        'lon': 13.408642,
                    },
                    'arr_date_time': '2019-02-25T20:25:13+01:00',
                    'arr_time': 1551122713,
                    'distance': 1777,
                    'driving_time': 313,
                    'end_date_time': '2019-02-25T20:25:13+01:00',
                    'end_time': 1551122713,
                    'id': 'berlin-2',
                    'load_after': [0],
                    'load_before': [0],
                    'location_id': '13.408642_52.527094',
                    'preparation_time': 0,
                    'type': 'service',
                    'waiting_time': 0,
                },
                {
                    'address': {
                        'lat': 52.527303,
                        'location_id': '13.398170_52.527303',
                        'lon': 13.39817,
                    },
                    'arr_date_time': '2019-02-25T20:27:44+01:00',
                    'arr_time': 1551122864,
                    'distance': 2562,
                    'driving_time': 464,
                    'end_date_time': '2019-02-25T20:27:44+01:00',
                    'end_time': 1551122864,
                    'id': 'berlin-1',
                    'load_after': [0],
                    'load_before': [0],
                    'location_id': '13.398170_52.527303',
                    'preparation_time': 0,
                    'type': 'service',
                    'waiting_time': 0,
                },
                {
                    'address': {'lat': 52.537, 'location_id': 'berlin', 'lon': 13.406},
                    'arr_date_time': '2019-02-25T20:33:09+01:00',
                    'arr_time': 1551123189,
                    'distance': 4334,
                    'driving_time': 789,
                    'load_before': [0],
                    'location_id': 'berlin',
                    'preparation_time': 0,
                    'type': 'end',
                    'waiting_time': 0,
                },
            ]
        ],
    )
    completion_time: Optional[int] = Field(
        None, description='Completion time of route in seconds', examples=[1800]
    )
    distance: Optional[int] = Field(
        None, description='Distance of route in meter', examples=[10000]
    )
    points: Optional[List[RoutePoint]] = Field(
        None,
        description='Array of route planning points',
        examples=[
            [
                {
                    'coordinates': [
                        [13.4061, 52.53701],
                        [13.40643, 52.53634],
                        [13.4067, 52.53573],
                        [13.40722, 52.53479],
                        [13.40729, 52.53468],
                        [13.40735, 52.53463],
                        [13.41205, 52.53275],
                        [13.41245, 52.53264],
                        [13.41218, 52.53166],
                        [13.41205, 52.53139],
                        [13.41177, 52.53112],
                        [13.41072, 52.53033],
                        [13.41049, 52.53014],
                        [13.4098, 52.52928],
                        [13.40937, 52.5287],
                        [13.40994, 52.52858],
                        [13.41032, 52.52782],
                        [13.41054, 52.52745],
                        [13.41097, 52.52656],
                        [13.41107, 52.5265],
                        [13.41119, 52.52614],
                        [13.41119, 52.52604],
                        [13.41109, 52.52587],
                        [13.40971, 52.52631],
                        [13.40981, 52.52659],
                        [13.40891, 52.52683],
                        [13.40852, 52.52695],
                    ],
                    'type': 'LineString',
                },
                {
                    'coordinates': [
                        [13.40852, 52.52695],
                        [13.4081, 52.52706],
                        [13.40802, 52.52696],
                        [13.40469, 52.52758],
                        [13.4033, 52.52781],
                        [13.40331, 52.52767],
                        [13.40298, 52.52763],
                        [13.40261, 52.52807],
                        [13.39818, 52.52726],
                    ],
                    'type': 'LineString',
                },
                {
                    'coordinates': [
                        [13.39818, 52.52726],
                        [13.39808, 52.52725],
                        [13.39785, 52.52768],
                        [13.39727, 52.52866],
                        [13.39762, 52.52876],
                        [13.3976, 52.52914],
                        [13.39756, 52.52943],
                        [13.39597, 52.53243],
                        [13.39777, 52.5325],
                        [13.39843, 52.53254],
                        [13.39891, 52.53259],
                        [13.40288, 52.53354],
                        [13.40297, 52.53359],
                        [13.40338, 52.534],
                        [13.40466, 52.53419],
                        [13.40433, 52.53503],
                        [13.40443, 52.53511],
                        [13.40541, 52.53611],
                        [13.40547, 52.53615],
                        [13.40643, 52.53634],
                        [13.4061, 52.53701],
                    ],
                    'type': 'LineString',
                },
            ]
        ],
    )
    preparation_time: Optional[int] = Field(
        None, description='Preparation time of route in seconds'
    )
    service_duration: Optional[int] = Field(
        None, description='Service duration of route in seconds'
    )
    transport_time: Optional[int] = Field(
        None, description='Transport time of route in seconds', examples=[1800]
    )
    vehicle_id: Optional[str] = Field(
        None,
        description='Id of vehicle that operates route',
        examples=['driver-stefan'],
    )
    waiting_time: Optional[int] = Field(
        None, description='Waiting time of route in seconds'
    )


class Shipment(BaseModel):
    allowed_vehicles: Optional[List[str]] = Field(
        None,
        description='Specifies an array of allowed vehicles, i.e. array of vehicle ids. For example, if this shipment can only be conducted EITHER by "technician_peter" OR "technician_stefan" specify this as follows: ["technician_peter","technician_stefan"].',
        examples=[['technician_peter', 'technician_stefan']],
    )
    delivery: Stop
    disallowed_vehicles: Optional[List[str]] = Field(
        None,
        description='Specifies an array of disallowed vehicles, i.e. array of vehicle ids.',
        examples=[['driver-A', 'driver-B']],
    )
    id: str = Field(
        ...,
        description='Specifies the id of the shipment. Ids need to be unique so there must not be two services/shipments with the same id.',
        examples=['7fe77504-7df8-4497-843c-02d70b6490ce'],
    )
    max_time_in_vehicle: Optional[int] = Field(
        9223372036854776000,
        description='Specifies the maximum time in seconds a shipment can stay in the vehicle.',
        examples=[1800],
    )
    name: Optional[str] = Field(
        None,
        description='Meaningful name for shipment, e.g. "pickup and deliver pizza to Peter".',
        examples=['pickup and deliver pizza to Peter'],
    )
    pickup: Stop
    priority: Optional[int] = Field(
        2,
        description='Specifies the priority. Can be 1 = high priority to 10 = low priority. Often there are more services/shipments than the available vehicle fleet can handle. Then you can set priorities to differentiate high priority tasks from those that could be left unassigned. I.e. the lower the priority the earlier these tasks are omitted in the solution.',
        examples=[1],
    )
    required_skills: Optional[List[str]] = Field(
        None,
        description='Specifies an array of required skills, i.e. array of string (not case sensitive). For example, if this shipment needs to be conducted by a technician having a `drilling_machine` and a `screw_driver` then specify the array as follows: `["drilling_machine","screw_driver"]`. This means that the service can only be done by a vehicle (technician) that has the skills `drilling_machine` AND `screw_driver` in its skill array. Otherwise it remains unassigned.',
        examples=[['drilling_machine', 'screw_driver']],
    )
    size: Optional[List[int]] = Field(
        [0],
        description='Size can have multiple dimensions and should be in line with the capacity dimension array of the vehicle type. For example, if the item that needs to be delivered has two size dimension, volume and weight, then specify it as follow [ 20, 5 ] assuming a volume of 20 and a weight of 5.',
        examples=[[3]],
    )


class Solution(BaseModel):
    completion_time: Optional[int] = Field(
        None,
        description='Overall completion time in seconds, i.e. the sum of each routes/drivers operation time.',
        examples=[12000],
    )
    costs: Optional[int] = None
    distance: Optional[int] = Field(
        None,
        description="Overall distance travelled in meter, i.e. the sum of each route's transport distance",
        examples=[1200],
    )
    max_operation_time: Optional[int] = Field(
        None, description='Operation time of longest route in seconds.', examples=[4000]
    )
    no_unassigned: Optional[int] = Field(
        None,
        description='Number of jobs that could not be assigned to final solution.',
        examples=[1],
    )
    no_vehicles: Optional[int] = Field(
        None, description='Number of employed vehicles.', examples=[10]
    )
    preparation_time: Optional[int] = Field(
        None, description='Overall preparation time in seconds.'
    )
    routes: Optional[List[Route]] = Field(None, description='An array of routes')
    service_duration: Optional[int] = Field(
        None, description='Overall service time in seconds.', examples=[1200]
    )
    time: Optional[int] = Field(None, description='Use `transport_time` instead.')
    transport_time: Optional[int] = Field(
        None,
        description="Overall time travelled in seconds, i.e. the sum of each route's transport time.",
        examples=[12000],
    )
    unassigned: Optional[Unassigned] = None
    waiting_time: Optional[int] = Field(
        None, description='Overall waiting time in seconds.', examples=[200]
    )


class Request(BaseModel):
    algorithm: Optional[Algorithm] = None
    configuration: Optional[Configuration] = Field(
        None, description='Specifies general configurations.'
    )
    cost_matrices: Optional[List[CostMatrix]] = Field(
        None,
        description='Specifies your own tranport time and distance matrices.',
        examples=[
            [
                {
                    'data': {
                        'distances': [
                            [0, 1000, 1400, 2000, 0, 4000],
                            [1000, 0, 1000, 2100, 1000, 4000],
                            [1400, 1000, 0, 1100, 1100, 4000],
                            [2000, 2100, 1100, 0, 1200, 4000],
                            [0, 1000, 1400, 2000, 0, 4000],
                            [4000, 4000, 4000, 4000, 4000, 4000],
                        ],
                        'times': [
                            [0, 1000, 1400, 2000, 0, 4000],
                            [1000, 0, 1000, 2100, 1000, 4000],
                            [1400, 1000, 0, 1100, 1100, 4000],
                            [2000, 2100, 1100, 0, 1200, 4000],
                            [0, 1000, 1400, 2000, 0, 4000],
                            [4000, 4000, 4000, 4000, 4000, 4000],
                        ],
                    },
                    'location_ids': [
                        'start',
                        'Dammstrasse',
                        'Bergstrasse',
                        'Koppstrasse',
                        'start2',
                        'nirvana',
                    ],
                    'profile': 'car',
                }
            ]
        ],
    )
    objectives: Optional[List[Objective1]] = Field(
        None,
        description='Specifies an objective function. The vehicle routing problem is solved in such a way that this objective function is minimized.',
        examples=[
            [
                {'type': 'min', 'value': 'vehicles'},
                {'type': 'min', 'value': 'completion_time'},
            ]
        ],
    )
    relations: Optional[List[Union[JobRelation, GroupRelation]]] = Field(
        None, description='Defines additional relationships between orders.'
    )
    services: Optional[List[Service]] = Field(
        None,
        description='Specifies the orders of the type "service". These are, for example, pick-ups, deliveries or other stops that are to be approached by the specified vehicles. Each of these orders contains only one location.',
    )
    shipments: Optional[List[Shipment]] = Field(
        None,
        description='Specifies the available shipments. Each shipment contains a pickup and a delivery stop, which must be processed one after the other.',
    )
    vehicle_types: Optional[List[VehicleType]] = Field(
        None,
        description='Specifies the available vehicle types. These types can be assigned to vehicles.',
    )
    vehicles: Optional[List[Vehicle]] = Field(
        None, description='Specifies the available vehicles.', min_length=1
    )


class Response(BaseModel):
    copyrights: Optional[List[str]] = Field(
        None, examples=[['GraphHopper', 'OpenStreetMap contributors']]
    )
    processing_time: Optional[int] = Field(
        None,
        description='Processing time in ms. If job is still waiting in queue, processing_time is 0',
        examples=[900000],
    )
    solution: Optional[Solution] = None
    status: Optional[Status] = Field(
        None,
        description='Indicates the current status of the job',
        examples=['finished'],
    )
    waiting_time_in_queue: Optional[int] = Field(
        None, description='Waiting time in ms', examples=[300000]
    )
